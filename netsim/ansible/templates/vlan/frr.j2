#!/bin/bash
#
set -e # Exit immediately when any command fails
#

{% if vlans is defined %}

# Create single bridge for all VLANs, with single STP instance
{% set br_name = "br0" %}
if [ ! -e /sys/devices/virtual/net/{{ br_name }} ]; then
ip link add name {{ br_name }} type bridge
ip link set {{ br_name }} type bridge vlan_filtering 1
ip link set dev {{ br_name }} up
fi

# Iterate over all trunk ports to configure (native) vlans
{% for i in interfaces if i.vlan is defined and i.vlan.trunk_id is defined %}
ip link set {{ i.ifname }} master {{ br_name }}
{%  for v in i.vlan.trunk %}
{%   set vlan = vlans[v] %}
bridge vlan add dev {{ i.ifname }} vid {{ vlan.id }}{%- if v==i.vlan.native|default('') %} pvid untagged
bridge vlan delete dev {{ i.ifname }} vid 1
{%   endif %}

{%  endfor %}
{% endfor %}

# Assumes listing order of interfaces is vlan_members before svi interfaces
{% for i in interfaces if i.type in ['vlan_member','svi'] %}

{% if i.type=='vlan_member' %}
{% set vlan_name = "vlan" + i.vlan.access_id|string %}
bridge vlan add dev {{ br_name }} vid {{ i.vlan.access_id }} self
ip link add link {{ br_name }} name {{ vlan_name }} type vlan id {{ i.vlan.access_id }}
ip link set dev {{ vlan_name }} up
{% else %}
ip addr flush dev {{ i.ifname }}
{%  if 'ipv4' in i and (i.ipv4 is string or 'ipv4' in loopback) %}
ip addr add {{ i.ipv4 if i.ipv4 is string else loopback.ipv4 }} dev {{ i.ifname }}
{%  endif %}
{%  if 'ipv6' in i %}
{%   if i.ipv6 is string %}
ip addr add {{ i.ipv6 }} dev {{ i.ifname }}
{%   elif not i.ipv6 %}
sysctl -w net.ipv6.conf.{{ i.ifname }}.disable_ipv6=1
{%   endif %}
{%  endif %}
{% endif %}

# Note: If the interface is in a vrf, it gets moved later by the vrf module
{% endfor %}

{% endif %} # if vlans is defined

exit 0